input {
  file {
    type => "greeting-service"
    # Logstash insists on absolute paths...
    # path => "/Users/serhii/Documents/Web/Training/Java/java/spring-liquibase-okr/greetingservice/logs/greetingservice.log"
    path => "/Users/work/Documents/Training/Java/java/spring-liquibase-okr/greetingservice/logs/greetingservice.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
  file {
    type => "detail-service"
    # path => "/Users/serhii/Documents/Web/Training/Java/java/spring-liquibase-okr/detailservice/logs/detailservice.log"
    path => "/Users/work/Documents/Training/Java/java/spring-liquibase-okr/detailservice/logs/detailservice.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
  file {
    type => "eureka-service"
    # path => "/Users/serhii/Documents/Web/Training/Java/java/spring-liquibase-okr/eurekaservice/logs/eurekaservice.log"
    path => "/Users/work/Documents/Training/Java/java/spring-liquibase-okr/eurekaservice/logs/eurekaservice.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
  file {
    type => "zuul-service"
    # path => "/Users/serhii/Documents/Web/Training/Java/java/spring-liquibase-okr/zuulservice/logs/zuulservice.log"
    path => "/Users/work/Documents/Training/Java/java/spring-liquibase-okr/zuulservice/logs/zuulservice.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
  file {
    type => "zipkin-service"
    # path => "/Users/serhii/Documents/Web/Training/Java/java/spring-liquibase-okr/zipkinservice/logs/zipkinservice.log"
    path => "/Users/work/Documents/Training/Java/java/spring-liquibase-okr/zipkinservice/logs/zipkinservice.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
  file {
    type => "authorization-service"
    # path => "/Users/serhii/Documents/Web/Training/Java/java/spring-liquibase-okr/authorizationservice/logs/authorizationservice.log"
    path => "/Users/work/Documents/Training/Java/java/spring-liquibase-okr/authorizationservice/logs/authorizationservice.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
  file {
    type => "config-service"
    # path => "/Users/serhii/Documents/Web/Training/Java/java/spring-liquibase-okr/configservice/logs/configservice.log"
    path => "/Users/work/Documents/Training/Java/java/spring-liquibase-okr/configservice/logs/configservice.log"
    codec => multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
      negate => "true"
      what => "previous"
    }
  }
}

filter {
  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  #Grokking Spring Boot's default log format
  grok {
    match => [ "message",
      "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
      "message",
      "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
    ]
  }

  #Parsing out timestamps which are in timestamp field thanks to previous grok section
  date {
    match => ["timestamp" , "yyyy-MM-dd HH:mm:ss.SSS"]
  }
}

output {
  stdout {
    codec => rubydebug
  }
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "todo-logstash-%{+YYYY.MM.dd}"
  }
}
